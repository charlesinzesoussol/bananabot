"""Image generation command for BananaBot."""

import logging
import discord
from discord import app_commands
from typing import Optional

from ..utils.validators import validate_and_sanitize_prompt, validator
from ..utils.error_handler import error_handler, ValidationError
from ..services.image_processor import image_processor

logger = logging.getLogger(__name__)

def setup_generate_command(bot) -> None:
    """
    Setup the /generate command for the bot.
    
    Args:
        bot: BananaBot instance
    """
    
    @bot.tree.command(
        name="generate",
        description="Generate an AI image using Gemini 2.5 Flash"
    )
    @app_commands.describe(
        prompt="Describe the image you want to generate (max 1000 characters)",
        style="Optional style modifier (e.g., 'photorealistic', 'cartoon', 'oil painting')"
    )
    async def generate(
        interaction: discord.Interaction,
        prompt: str,
        style: Optional[str] = None
    ) -> None:
        """
        Generate an image from a text prompt.
        
        Args:
            interaction: Discord interaction
            prompt: Text description of the image to generate
            style: Optional style modifier
        """
        logger.info(f"Generate command from {interaction.user} in {interaction.guild}: '{prompt[:50]}...'")
        
        # PATTERN: Defer for long operations (>3 seconds)
        await interaction.response.defer(thinking=True)
        
        try:
            # CRITICAL: Validate input first
            sanitized_prompt = validate_and_sanitize_prompt(prompt)
            
            # Add style if provided
            if style:
                style_sanitized = validate_and_sanitize_prompt(style)
                full_prompt = f"{sanitized_prompt}, {style_sanitized} style"
            else:
                full_prompt = sanitized_prompt
            
            logger.info(f"Sanitized prompt: '{full_prompt[:50]}...'")
            
            # PATTERN: Rate limiting check
            user_id = str(interaction.user.id)
            if not await bot.rate_limiter.check_user(user_id):
                # Get rate limit info for better error message
                status = await bot.rate_limiter.get_user_status(user_id)
                reset_time = status.get('reset_time')
                
                if reset_time:
                    minutes = int(reset_time // 60)
                    message = f"Rate limit exceeded. Try again in {minutes} minutes."
                else:
                    message = "Rate limit exceeded. Please try again later."
                
                await interaction.followup.send(message, ephemeral=True)
                return
            
            # Generate image through Gemini API
            try:
                image_bytes = await bot.gemini_client.generate_image(full_prompt)
                logger.info(f"Image generated successfully for user {interaction.user}")
                
            except Exception as e:
                logger.error(f"Image generation failed: {e}")
                await error_handler.handle_command_error(interaction, e)
                return
            
            # PATTERN: Convert to Discord file
            try:
                # Create safe filename
                safe_prompt = prompt[:30].replace(' ', '_').replace('/', '_')
                filename = validator.get_safe_filename(f"generated_{safe_prompt}", "png")
                
                file = image_processor.create_discord_file(image_bytes, filename)
                
                # Create embed with generation info
                embed = discord.Embed(
                    title="Image Generated!",
                    description=f"**Prompt:** {prompt[:200]}{'...' if len(prompt) > 200 else ''}",
                    color=0x00ff00
                )
                
                if style:
                    embed.add_field(name="Style", value=style, inline=True)
                
                embed.add_field(name="Generated by", value=interaction.user.mention, inline=True)
                embed.set_footer(text="Powered by Gemini 2.5 Flash Image")
                
                # Send response
                await interaction.followup.send(
                    embed=embed,
                    file=file
                )
                
                logger.info(f"Image sent successfully to {interaction.user}")
                
            except Exception as e:
                logger.error(f"Failed to process/send image: {e}")
                await error_handler.handle_command_error(interaction, e)
                return
            
        except ValidationError as e:
            logger.warning(f"Validation error from {interaction.user}: {e}")
            await interaction.followup.send(
                f"Invalid prompt: {e.user_message}",
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Unexpected error in generate command: {e}")
            await error_handler.handle_command_error(interaction, e)
    
    # Also register an /imagine command as an alias with preset styles
    @bot.tree.command(
        name="imagine",
        description="Quick image generation with preset styles"
    )
    @app_commands.describe(
        prompt="Describe the image you want to generate",
        style="Choose a preset style"
    )
    @app_commands.choices(style=[
        app_commands.Choice(name="Photorealistic", value="photorealistic"),
        app_commands.Choice(name="Digital Art", value="digital art"),
        app_commands.Choice(name="Oil Painting", value="oil painting"),
        app_commands.Choice(name="Watercolor", value="watercolor"),
        app_commands.Choice(name="Cartoon", value="cartoon"),
        app_commands.Choice(name="Anime", value="anime"),
        app_commands.Choice(name="Cyberpunk", value="cyberpunk"),
        app_commands.Choice(name="Fantasy", value="fantasy"),
    ])
    async def imagine(
        interaction: discord.Interaction,
        prompt: str,
        style: str = "digital art"
    ) -> None:
        """
        Quick image generation with preset styles.
        
        This is essentially the same as /generate but with preset style choices.
        """
        # Call the generate function with the style
        await generate(interaction, prompt, style)
    
    logger.info("Generate and Imagine commands registered")