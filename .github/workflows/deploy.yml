name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Navigate to bot directory
          cd ~/bananabot || mkdir -p ~/bananabot && cd ~/bananabot
          
          # Pull latest code
          if [ -d ".git" ]; then
            echo "Updating existing repository..."
            git pull origin main
          else
            echo "Cloning repository..."
            git clone https://github.com/charlesinzesoussol/bananabot.git .
          fi
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install/update dependencies
          source venv/bin/activate
          echo "Installing dependencies..."
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Check if .env file exists, if not, remind to create it
          if [ ! -f ".env" ]; then
            echo "WARNING: .env file not found!"
            echo "Please create .env file with:"
            echo "DISCORD_TOKEN=your_token"
            echo "GEMINI_API_KEY=your_key"
            exit 1
          fi
          
          # Stop existing bot process if running
          echo "Stopping existing bot process..."
          pkill -f "python.*start.py" || true
          pkill -f "python.*slash_bot.py" || true
          
          # Start bot with nohup in background
          echo "Starting BananaBot..."
          nohup venv/bin/python start.py > bot.log 2>&1 &
          
          # Get the process ID
          BOT_PID=$!
          echo "Bot started with PID: $BOT_PID"
          
          # Wait a moment and check if bot is still running
          sleep 5
          if ps -p $BOT_PID > /dev/null; then
            echo "✅ Bot successfully deployed and running!"
            echo "Check logs with: tail -f ~/bananabot/bot.log"
          else
            echo "❌ Bot failed to start. Check logs for errors."
            tail -20 bot.log
            exit 1
          fi

    - name: Health Check
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd ~/bananabot
          # Check if bot process is running
          if pgrep -f "python.*start.py" > /dev/null; then
            echo "✅ Bot is running"
            echo "Recent logs:"
            tail -5 bot.log
          else
            echo "❌ Bot is not running"
            exit 1
          fi